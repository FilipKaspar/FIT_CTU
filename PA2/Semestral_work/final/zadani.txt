Téma : SuprDuprKalendaros
Autor: Filip Kašpar

Požadavky:
	Tato semestrální práce patří do kategorie interaktivních aplikací. Vaším cílem je vytvořit aplikaci, kterou bude uživatel interaktivně ovládat (např. pomocí příkazů na standardním vstupu). Případné parametry aplikace se nesnažte definovat přímo v kódu (a to ani pomocí konstant). Umístěte je do konfiguračních souborů (jednoho nebo více), které váš program bude načítat.

	Vaším cílem je implementovat aplikaci pro správu kalendářů a událostí v nich.

	Implementujte následující funcionality:

	Kalendář musí zobrazovat alespoň denní, týdenní a měsíční přehled událostí.

	U událostí chceme evidovat alespoň následující informace: název události, datum a čas, trvání, místo, účastníky, tagy a textovou poznámku. V rámci své implementace můžete přidat další zajímavé atributy (př. účast: povinná, přesunutelná, volitelná, …).

	Události mohou být jednorázové nebo opakující se. Umožněte definovat frekvenci opakování alespoň na úrovni dní.

	Kalendář musí umožnit vyhledávat události podle jednotlivých atributů a to včetně kombinací obsahující spojky "a zároveň" a "nebo" (př. události před 23.1.2022 a zároveń v Praze, …).

	Umožněte exportování a importování událostí. Exportovat lze i výběr definovaný vyhledáváním.

	Kalendář nesmí umožnit kolizi, v případě kolize musí umožnit najít nejbližší volný termín nebo přesunout událost (je-li to možné). Alternativně můžete povolit max. počet kolizí (př. 24 kolizí pro učebnu, podle počtu studentů, které v ní mohou být, …), nelze však kolize ignorovat.

	Kde lze využít polymorfismus? (doporučené)

	zobrazení kalendáře: denní, týdenní, měsíční, …

	strategie řešení kolizí: nalezení nejbližšího možného termínu, přesun max. X jiných událostí na volné sloty, …

	formáty exportovaných událostí: proprietární, iCalendar, CSV, …

	uživatelské rozhraní: konzole, ncurses, SDL, OpenGL (různé varianty), …

	druhy událostí (předem si rozmyslete, zda ve vašem případě se jedná o polymorfismus)

	Další informace:

	http://en.cppreference.com/w/cpp/chrono

	https://en.wikipedia.org/wiki/ICalendar

	Není nutné implementovat porozumění formátu ICalendar, můžete zvolit vlastní proprietární formát, který se vám bude dobře zpracovávat.

	Při implementaci jednotlivých zobrazení se zaměřte na to, jakým způsobem zde chytře využít polymorfismus. Tedy pokud budete přidávat nové zobrazení, tak by takové zobrazení mělo znamenat vytvoření nové třídy a "její registraci na jednom jediném místě".
	
Vlastní zadání:
	Kalendář budu spuštěn v terminálu a obsluhován pomocí CLI.
	
	Navíc v každém typu kalendáře, což může být buďto denní, týdenní nebo měsíční, budeme moc vypočítat celkový počet událostí. V každém zobrazení bude zobrazeno kolik celkem událostí daný den, týden či měsíc obsahuje.
	
	Všechny tyto záznamy se budou ukládat do paměti, pouze při použítí funkce export se pole těchto záznamů uloží jako .csv soubor, z kterého budeme moci později načítat jednotlivé události. Čas bude uchováván standartně v hodinách, minutách a sekundách.
	
	Další možnost výpisu, bude vypsání událostí pod sebou od následující do poslední. K vyhledávání bude taktéž přidána možnost, která zobrazí další nejbližší událost.
	
	Kalendář bude taky navíc k denímu opakování umět opakovat události týdně a měsíčně a každých 14 dní.
	
	Další možnost bude událost mazat a upravovat. 	
	Funkcialita upravení události bude rozdělená na 2 podfunkce a to:
	1. Kompletní úprava události
	2. Úprava pouze datumu konání.
	
	Vypisování kalendáře Day bude vypadat následovně:
	Day |  Nazev   | Jméno Události + Popis
	Total Events: XX
	-------------------------------
	1:00  Udalost 1
		  Udalost 2
	2:00
		  Udalost 3
	3:00
		  Udalost 4
	
	Vypisování "Day" zobrazí v daném dni všechny události. K tomu jejich čas, název
	a popis.
	
	Vypisování kalendáře Week bude vypadat následovně:
	Date Range
	----------------------------------------
	  Monday   |  Tuesday  | Wednesday | ...
	----------------------------------------
	Udalost 1    Udalost 1    Udalost 1
	Udalost 2    Udalost 2    Udalost 2
	----------------------------------------
	Total Events: XX
	
	Vypisování přes "Week" bude tedy zobrazovat pouze jména událostí. Pro 
	zobrazení detailů můžeme využít funkci findRecord. 
	
	
	Vypisování kalendáře Month bude vypadat následovně:
	Monday   |  Tuesday  | Wednesday | ...
	----------------------------------------
	Date Range
	----------------------------------------
	Udalost 1    Udalost 1    Udalost 1
	Udalost 2    Udalost 2    Udalost 2
	----------------------------------------
	Total Events: XX
	----------------------------------------
	Date Range
	----------------------------------------
	Udalost 1    Udalost 1    Udalost 1
	Udalost 2    Udalost 2    Udalost 2
	----------------------------------------
	Total Events: XX
	----------------------------------------
	Date Range	
	----------------------------------------
	Udalost 1    Udalost 1    Udalost 1
	Udalost 2    Udalost 2    Udalost 2
	----------------------------------------
	Total Events: XX
	
	Stejně jako u zobrazení "Week", zobrazení "Month" bude vypisovat pouze jména
	událostí.
	
Polymorfizmus gde:
	První polymorfismus mám obsažený ve tříde CCalender, z které dědí třídy CCalenderDay, CCalenderWeek a CCalenderMonth. Všechny tyto třídy mají overridnuté methody pro výpis kalendáře a pro získaní všech záznamů pro výpis.
	
	Druhý polymorfismus je obsažen ve tříde CEventRepeat, z které dědí třídy CEventRepeatDaily, CEventRepeatWeekly, CEventRepeatMonthly, CEventRepeatTwoWeeks a CEventRepeatNone.
	
	Viz. obrázky z doxygenu.
